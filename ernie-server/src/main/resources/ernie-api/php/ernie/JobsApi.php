<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class JobsApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * getJobsMap
	 * Return a map of jobId to URI
   * @return jobStatusMap
	 */

   public function getJobsMap() {

  		//parse inputs
  		$resourcePath = "/jobs";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('jobStatusMap' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'jobStatusMap');
      }
  		return $responseObject;

      }
  /**
	 * postJob
	 * Schedules the submitted job
   * body, string: ReportRequest (optional)
   * @return ReportResponse
	 */

   public function postJob($body=null) {

  		//parse inputs
  		$resourcePath = "/jobs";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('ReportResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ReportResponse');
      }
  		return $responseObject;

      }
  /**
	 * getDeletedJobsCatalog
	 * Return a catalog of deleted jobs' JobEntities
   * @return JobsCatalogResponse
	 */

   public function getDeletedJobsCatalog() {

  		//parse inputs
  		$resourcePath = "/jobs/deleted";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('JobsCatalogResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'JobsCatalogResponse');
      }
  		return $responseObject;

      }
  /**
	 * getFailedJobsCatalog
	 * Return a catalog of failed jobs' JobEntities
   * @return JobsCatalogResponse
	 */

   public function getFailedJobsCatalog() {

  		//parse inputs
  		$resourcePath = "/jobs/failed";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('JobsCatalogResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'JobsCatalogResponse');
      }
  		return $responseObject;

      }
  /**
	 * purgeExpired
	 * Purges expired jobs
   * @return 
	 */

   public function purgeExpired() {

  		//parse inputs
  		$resourcePath = "/jobs/expired";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * getExpiredJobsCatalog
	 * Return a catalog of expired jobs' JobEntities
   * @return JobsCatalogResponse
	 */

   public function getExpiredJobsCatalog() {

  		//parse inputs
  		$resourcePath = "/jobs/expired";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('JobsCatalogResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'JobsCatalogResponse');
      }
  		return $responseObject;

      }
  /**
	 * getCompleteJobsCatalog
	 * Return a catalog of complete jobs' JobEntities
   * @return JobsCatalogResponse
	 */

   public function getCompleteJobsCatalog() {

  		//parse inputs
  		$resourcePath = "/jobs/complete";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('JobsCatalogResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'JobsCatalogResponse');
      }
  		return $responseObject;

      }
  /**
	 * getJobsCatalog
	 * Return a catalog of all JobEntities
   * @return JobsCatalogResponse
	 */

   public function getJobsCatalog() {

  		//parse inputs
  		$resourcePath = "/jobs/catalog";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('JobsCatalogResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'JobsCatalogResponse');
      }
  		return $responseObject;

      }
  /**
	 * getJobEntity
	 * Return a JobEntity
   * job_id, string: job_id (optional)
   * @return JobEntity
	 */

   public function getJobEntity($job_id=null) {

  		//parse inputs
  		$resourcePath = "/jobs/{job_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($job_id != null) {
  			$resourcePath = str_replace("{" . "job_id" . "}",
  			                            $this->apiClient->toPathValue($job_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('JobEntity' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'JobEntity');
      }
  		return $responseObject;

      }
  /**
	 * getJobResult
	 * Returns a stream containing the result content for the given Job ID
   * job_id, string: job_id (optional)
   * Accept, string: Accept (optional)
   * @return byte
	 */

   public function getJobResult($job_id=null, $Accept=null) {

  		//parse inputs
  		$resourcePath = "/jobs/{job_id}/result";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($Accept != null) {
                $headerParams['Accept'] = $this->apiClient->toHeaderValue($Accept);
            }
        if($job_id != null) {
  			$resourcePath = str_replace("{" . "job_id" . "}",
  			                            $this->apiClient->toPathValue($job_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('byte' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'byte');
      }
  		return $responseObject;

      }
  /**
	 * deleteReport
	 * Purges report output for a given Job ID
   * job_id, string: job_id (optional)
   * @return DeleteResponse
	 */

   public function deleteReport($job_id=null) {

  		//parse inputs
  		$resourcePath = "/jobs/{job_id}/result";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($job_id != null) {
  			$resourcePath = str_replace("{" . "job_id" . "}",
  			                            $this->apiClient->toPathValue($job_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('DeleteResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'DeleteResponse');
      }
  		return $responseObject;

      }
  /**
	 * getResultDetail
	 * Retrieves details for output from a given jobId
   * job_id, string: job_id (optional)
   * @return ReportEntity
	 */

   public function getResultDetail($job_id=null) {

  		//parse inputs
  		$resourcePath = "/jobs/{job_id}/result/detail";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($job_id != null) {
  			$resourcePath = str_replace("{" . "job_id" . "}",
  			                            $this->apiClient->toPathValue($job_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('ReportEntity' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ReportEntity');
      }
  		return $responseObject;

      }
  /**
	 * getJobStatus
	 * Return StatusResponse for given jobId
   * job_id, string: job_id (optional)
   * @return StatusResponse
	 */

   public function getJobStatus($job_id=null) {

  		//parse inputs
  		$resourcePath = "/jobs/{job_id}/status";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($job_id != null) {
  			$resourcePath = str_replace("{" . "job_id" . "}",
  			                            $this->apiClient->toPathValue($job_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

       if ('StatusResponse' == 'file') {
       } else {
  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'StatusResponse');
      }
  		return $responseObject;

      }
  
}

