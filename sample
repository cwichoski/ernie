diff --git a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Actors.scala b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Actors.scala
index e955c99..1f67065 100644
--- a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Actors.scala
+++ b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Actors.scala
@@ -35,11 +35,11 @@ class Coordinator(reportManager: ReportManager) extends Actor {
     log.debug("in act()")
     loop {
       react {
-        case req@ReportRequest(rptId, rptType) => {
+        case req@ReportRequest(rptId, rptType, retentionOption) => {
           val jobId = generateJobId()
           jobIdToResultMap += (jobId -> (JobStatus.PENDING, None))
           sender ! ReportResponse(jobId, req)
-          worker ! JobRequest(rptId, rptType, jobId)
+          worker ! JobRequest(rptId, rptType, jobId, retentionOption)
         }
         case req@DeleteRequest(jobId) => {
           if (jobIdToResultMap.contains(jobId)) {
@@ -94,13 +94,21 @@ class Worker(rptGenerator: ReportGenerator) extends Actor {
     log.debug("in act()")
     loop {
       react {
-        case req@JobRequest(defId, rptType, jobId) => {
+        case req@JobRequest(defId, rptType, jobId, retentionOption) => {
           sender ! JobResponse(JobStatus.IN_PROGRESS, None, req)
           var resultStatus = JobStatus.COMPLETE
           var rptId: Option[String] = None
           try {
-            rptId = Some(runReport(defId, jobId, rptType))
+            rptId = Some(runReport(defId, jobId, rptType, retentionOption))
           } catch {
+            case ex: ReportManager.RetentionDateAfterMaximumException => {
+              log.error("Caught exception while generating report: {}", ex.getMessage)
+              resultStatus = JobStatus.FAILED
+            }
+            case ex: ReportManager.RetentionDateInThePastException => {
+              log.error("Caught exception while generating report: {}", ex.getMessage)
+              resultStatus = JobStatus.FAILED
+            }
             case ex: Exception => {
               log.error("Caught exception while generating report: {}", ex.getMessage)
               resultStatus = JobStatus.FAILED
@@ -125,10 +133,10 @@ class Worker(rptGenerator: ReportGenerator) extends Actor {
     this
   }
 
-  private def runReport(defId: String, jobId: Long, rptType: ReportType): String = {
+  private def runReport(defId: String, jobId: Long, rptType: ReportType, retentionOption: Option[Int]): String = {
     log.debug("Running report {} for jobId {}...", defId, jobId)
     val rptId = "REPORT_" + jobId
-    rptGenerator.runReport(defId, rptId, rptType)
+    rptGenerator.runReport(defId, rptId, rptType, retentionOption)
     log.debug("Done running report {} for jobId {}...", defId, jobId)
     rptId
   }
diff --git a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Messages.scala b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Messages.scala
index 25b7e05..53d995e 100644
--- a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Messages.scala
+++ b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/Messages.scala
@@ -10,7 +10,7 @@ package com.ksmpartners.ernie.engine
 import com.ksmpartners.ernie.model.{ ReportType, JobStatus }
 
 /** Request that the report defId be generated resulting in an output of type rptType */
-case class ReportRequest(defId: String, rptType: ReportType)
+case class ReportRequest(defId: String, rptType: ReportType, retentionPeriod: Option[Int])
 /** The response to the given ReportRequest */
 case class ReportResponse(jobId: Long, req: ReportRequest)
 /** Request the resulting file for the given jobId */
@@ -31,7 +31,7 @@ case class JobsListRequest()
 case class JobsListResponse(jobsList: Array[String], req: JobsListRequest)
 
 /** Request that the definition defId be generated into a rptType document */
-case class JobRequest(defId: String, rptType: ReportType, jobId: Long)
+case class JobRequest(defId: String, rptType: ReportType, jobId: Long, retentionPeriod: Option[Int])
 /** The response(s) associated with the given JobRequest */
 case class JobResponse(jobStatus: JobStatus, rptId: Option[String], req: JobRequest)
 /** Request that the Actor be shut down */
diff --git a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/BirtReportGenerator.scala b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/BirtReportGenerator.scala
index 674298b..a3da0d7 100644
--- a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/BirtReportGenerator.scala
+++ b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/BirtReportGenerator.scala
@@ -15,6 +15,7 @@ import com.ksmpartners.ernie.model.ReportType
 import org.eclipse.birt.report.engine.emitter.csv.CSVRenderOption
 import com.ksmpartners.ernie.util.Utility._
 import scala.collection._
+import org.joda.time.DateTime
 
 /**
  * Class used to generate BIRT reports
@@ -53,7 +54,7 @@ class BirtReportGenerator(reportManager: ReportManager) extends ReportGenerator
    * Method that runs the design file at the given location defId, and outputs the results to rptId
    * as a rptType
    */
-  def runReport(defId: String, rptId: String, rptType: ReportType) {
+  def runReport(defId: String, rptId: String, rptType: ReportType, retentionDate: Option[Int]) {
     if (engine == null) throw new IllegalStateException("ReportGenerator was not started")
     log.debug("Generating PDF from report definition {}", defId)
     try_(reportManager.getDefinitionContent(defId).get) { defInputStream =>
@@ -62,6 +63,7 @@ class BirtReportGenerator(reportManager: ReportManager) extends ReportGenerator
       entity += (ReportManager.SOURCE_DEF_ID -> defId)
       entity += (ReportManager.REPORT_TYPE -> rptType)
       entity += (ReportManager.CREATED_USER -> "default")
+      entity += (ReportManager.RETENTION_DATE -> DateTime.now().plusDays(retentionDate getOrElse (reportManager.getDefaultRetentionDays)))
       try_(reportManager.putReport(entity)) { rptOutputStream =>
         runReport(defInputStream, rptOutputStream, rptType)
       }
diff --git a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/FileReportManager.scala b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/FileReportManager.scala
index d4f4266..fd32548 100644
--- a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/FileReportManager.scala
+++ b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/FileReportManager.scala
@@ -13,7 +13,7 @@ import com.ksmpartners.ernie.model.{ ReportEntity, DefinitionEntity, ReportType
 import com.fasterxml.jackson.databind.ObjectMapper
 import scala.collection._
 import com.ksmpartners.ernie.util.Utility._
-import com.ksmpartners.ernie.engine.report.ReportManager._
+import ReportManager._
 
 /**
  * Implementation of ReportManager that stores and loads reports and definitions from the filesystem
@@ -202,4 +202,9 @@ class FileReportManager(pathToDefinitions: String, pathToOutputs: String) extend
     }
   }
 
+  override def putDefaultRetentionDays(in: Int) { setDefaultRetentionDays(in) }
+  override def putMaximumRetentionDays(in: Int) { setMaximumRetentionDays(in) }
+  override def getDefaultRetentionDays: Int = ReportManager.getDefaultRetentionDays
+  override def getMaximumRetentionDays: Int = ReportManager.getMaximumRetentionDays
+
 }
diff --git a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/MemoryReportManager.scala b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/MemoryReportManager.scala
index c96332d..daa2696 100644
--- a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/MemoryReportManager.scala
+++ b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/MemoryReportManager.scala
@@ -114,4 +114,9 @@ class MemoryReportManager extends ReportManager {
     reports += (rptId -> content)
   }
 
+  override def putDefaultRetentionDays(in: Int) { setDefaultRetentionDays(in) }
+  override def putMaximumRetentionDays(in: Int) { setMaximumRetentionDays(in) }
+  override def getDefaultRetentionDays: Int = ReportManager.getDefaultRetentionDays
+  override def getMaximumRetentionDays: Int = ReportManager.getMaximumRetentionDays
+
 }
\ No newline at end of file
diff --git a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportGenerator.scala b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportGenerator.scala
index c54cf82..5fe3c0f 100644
--- a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportGenerator.scala
+++ b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportGenerator.scala
@@ -28,7 +28,7 @@ trait ReportGenerator {
   /**
    * Run the given defId and store the output in rptId as rptType
    */
-  def runReport(defId: String, rptId: String, rptType: ReportType)
+  def runReport(defId: String, rptId: String, rptType: ReportType, retentionDate: Option[Int])
 
   /**
    * Run the given defInputStream and store the output in rptOutputStream as rptType
diff --git a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportManager.scala b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportManager.scala
index d46e28f..7a403e9 100644
--- a/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportManager.scala
+++ b/ernie-engine/src/main/scala/com/ksmpartners/ernie/engine/report/ReportManager.scala
@@ -13,6 +13,8 @@ import com.ksmpartners.ernie.model.{ ReportType, ReportEntity, DefinitionEntity
 import com.ksmpartners.ernie.engine.report.ReportManager._
 import java.util
 import org.joda.time.DateTime
+import scala.Left
+import scala.Right
 
 /**
  * Trait that contains methods for managing reports and definitions
@@ -86,6 +88,15 @@ trait ReportManager {
    */
   def deleteReport(rptId: String)
 
+  /* Return the default number of days for report output retention */
+  def getDefaultRetentionDays: Int
+  /* Set the default number of days for report output retention */
+  def putDefaultRetentionDays(in: Int)
+  /* Return the maximum number of days for report output retention */
+  def getMaximumRetentionDays: Int
+  /* Set the maximum number of days for report output retention */
+  def putMaximumRetentionDays(in: Int)
+
 }
 
 /**
@@ -103,6 +114,14 @@ object ReportManager {
   val REPORT_TYPE = "fileType"
   val SOURCE_DEF_ID = "sourceDefId"
 
+  private var defaultRetentionDays = 7
+  private var maximumRetentionDays = 14
+
+  def setDefaultRetentionDays(in: Int) { defaultRetentionDays = in }
+  def setMaximumRetentionDays(in: Int) { maximumRetentionDays = in }
+  def getDefaultRetentionDays: Int = defaultRetentionDays
+  def getMaximumRetentionDays: Int = maximumRetentionDays
+
   /**
    * Returns a DefinitionEntity object containing the contents of entity. The entity must contain information about the
    * definition being added.
@@ -165,8 +184,16 @@ object ReportManager {
     rptEnt.setSourceDefId(entity.get(SOURCE_DEF_ID).get.asInstanceOf[String])
     rptEnt.setReportType(entity.get(REPORT_TYPE).get.asInstanceOf[ReportType])
     rptEnt.setCreatedUser(entity.get(CREATED_USER).get.asInstanceOf[String])
-    // TODO: Set up default retention date.
-    rptEnt.setRetentionDate(entity.getOrElse(RETENTION_DATE, DateTime.now().plusDays(  )).asInstanceOf[DateTime])
+
+    // Set up default retention date.
+    val retentionDateOption = entity.get(RETENTION_DATE)
+    if (retentionDateOption.isDefined) {
+      val retentionDate: DateTime = DateTime.parse(retentionDateOption.get.toString)
+      if (retentionDate isAfter DateTime.now().plusDays(maximumRetentionDays)) throw new RetentionDateAfterMaximumException("Retention date after maximum")
+      else if (retentionDate.isBeforeNow() || retentionDate.equals(DateTime.now())) throw new RetentionDateInThePastException("Retention date is in the past")
+      else rptEnt.setRetentionDate(retentionDate)
+    } else rptEnt.setRetentionDate(DateTime.now().plusDays(defaultRetentionDays))
+
     if (entity.contains(PARAM_MAP)) {
       val paramMap = entity.get(PARAM_MAP).get.asInstanceOf[Map[String, String]]
       val params: util.Map[String, String] = new util.HashMap()
@@ -177,4 +204,7 @@ object ReportManager {
     }
     rptEnt
   }
+
+  case class RetentionDateAfterMaximumException(smth: String) extends RuntimeException
+  case class RetentionDateInThePastException(smth: String) extends RuntimeException
 }
\ No newline at end of file
diff --git a/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/ActorsTest.scala b/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/ActorsTest.scala
index 77cf171..4a0c795 100644
--- a/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/ActorsTest.scala
+++ b/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/ActorsTest.scala
@@ -45,7 +45,7 @@ class ActorsTest {
 
   @Test
   def canRequestReportAndRetrieveStatus() {
-    val resp = (coordinator !? ReportRequest("test_def", ReportType.PDF)).asInstanceOf[ReportResponse]
+    val resp = (coordinator !? ReportRequest("test_def", ReportType.PDF, None)).asInstanceOf[ReportResponse]
     val statusResp = (coordinator !? StatusRequest(resp.jobId)).asInstanceOf[StatusResponse]
     Assert.assertNotSame(statusResp.jobStatus, JobStatus.NO_SUCH_JOB)
   }
@@ -58,14 +58,14 @@ class ActorsTest {
 
   @Test
   def canRequestJobMap() {
-    val resp = (coordinator !? ReportRequest("test_def", ReportType.PDF)).asInstanceOf[ReportResponse]
+    val resp = (coordinator !? ReportRequest("test_def", ReportType.PDF, None)).asInstanceOf[ReportResponse]
     val jobMapResp = (coordinator !? JobsListRequest()).asInstanceOf[JobsListResponse]
     Assert.assertTrue(jobMapResp.jobsList.contains(resp.jobId.toString))
   }
 
   @Test
   def canGetResult() {
-    val rptResp = (coordinator !? ReportRequest("test_def", ReportType.PDF)).asInstanceOf[ReportResponse]
+    val rptResp = (coordinator !? ReportRequest("test_def", ReportType.PDF, None)).asInstanceOf[ReportResponse]
     while ((coordinator !? StatusRequest(rptResp.jobId)).asInstanceOf[StatusResponse].jobStatus != JobStatus.COMPLETE) {
       // peg coordinator until job is complete
     }
@@ -88,29 +88,29 @@ class TestReportGenerator extends ReportGenerator {
 
   private var isStarted = false
 
-  def startup() {
+  override def startup() {
     if (isStarted)
       throw new IllegalStateException("ReportGenerator is already started")
     isStarted = true
   }
 
-  def getAvailableRptDefs: List[String] = {
+  override def getAvailableRptDefs: List[String] = {
     if (!isStarted)
       throw new IllegalStateException("ReportGenerator is not started")
     List("def_1")
   }
 
-  def runReport(defId: String, rptId: String, rptType: ReportType) {
+  override def runReport(defId: String, rptId: String, rptType: ReportType, retentionDate: Option[Int]) {
     if (!isStarted)
       throw new IllegalStateException("ReportGenerator is not started")
   }
 
-  def runReport(defInputStream: InputStream, rptOutputStream: OutputStream, rptType: ReportType) {
+  override def runReport(defInputStream: InputStream, rptOutputStream: OutputStream, rptType: ReportType) {
     if (!isStarted)
       throw new IllegalStateException("ReportGenerator is not started")
   }
 
-  def shutdown() {
+  override def shutdown() {
     if (!isStarted)
       throw new IllegalStateException("ReportGenerator is not started")
     isStarted = false
diff --git a/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/report/BirtReportGeneratorTest.scala b/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/report/BirtReportGeneratorTest.scala
index f535769..d656161 100644
--- a/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/report/BirtReportGeneratorTest.scala
+++ b/ernie-engine/src/test/scala/com/ksmpartners/ernie/engine/report/BirtReportGeneratorTest.scala
@@ -51,9 +51,9 @@ class BirtReportGeneratorTest {
 
   @Test
   def canRunExistingDef() {
-    reportGenerator.runReport("test_def", "test_rpt_pdf", ReportType.PDF)
-    reportGenerator.runReport("test_def", "test_rpt_csv", ReportType.CSV)
-    reportGenerator.runReport("test_def", "test_rpt_html", ReportType.HTML)
+    reportGenerator.runReport("test_def", "test_rpt_pdf", ReportType.PDF, None)
+    reportGenerator.runReport("test_def", "test_rpt_csv", ReportType.CSV, None)
+    reportGenerator.runReport("test_def", "test_rpt_html", ReportType.HTML, None)
     Assert.assertTrue(reportManager.hasReport("test_rpt_pdf"))
     Assert.assertTrue(reportManager.hasReport("test_rpt_csv"))
     Assert.assertTrue(reportManager.hasReport("test_rpt_html"))
@@ -62,7 +62,7 @@ class BirtReportGeneratorTest {
   @Test(expectedExceptions = Array(classOf[IllegalStateException]))
   def cantRunExistingReportWithStoppedGenerator() {
     val rptGen = new BirtReportGenerator(new MemoryReportManager)
-    rptGen.runReport("test1", "test2", ReportType.PDF)
+    rptGen.runReport("test1", "test2", ReportType.PDF, None)
   }
 
   @Test(expectedExceptions = Array(classOf[IllegalStateException]))
diff --git a/ernie-model/src/main/java/com/ksmpartners/ernie/model/ReportRequest.java b/ernie-model/src/main/java/com/ksmpartners/ernie/model/ReportRequest.java
index becde87..d9acd72 100644
--- a/ernie-model/src/main/java/com/ksmpartners/ernie/model/ReportRequest.java
+++ b/ernie-model/src/main/java/com/ksmpartners/ernie/model/ReportRequest.java
@@ -14,12 +14,14 @@ public class ReportRequest extends ModelObject {
 
     private String defId;
     private ReportType rptType;
+    private int retentionDays;
 
     public ReportRequest() {}
 
-    public ReportRequest(String defId, ReportType rptType) {
+    public ReportRequest(String defId, ReportType rptType, int retentionDays) {
         this.defId = defId;
         this.rptType = rptType;
+        this.retentionDays = retentionDays;
     }
 
     public void setDefId(String defId) {
@@ -38,4 +40,12 @@ public class ReportRequest extends ModelObject {
         return rptType;
     }
 
+    public void setRetentionDays(int retentionDays) {
+        this.retentionDays = retentionDays;
+    }
+
+    public int getRetentionDays() {
+        return retentionDays;
+    }
+
 }
diff --git a/ernie-server/src/main/resources/props/default.props b/ernie-server/src/main/resources/props/default.props
index e1bfb50..e947bc0 100644
--- a/ernie-server/src/main/resources/props/default.props
+++ b/ernie-server/src/main/resources/props/default.props
@@ -4,3 +4,5 @@
 
 rpt.def.dir=./ernie-engine/src/main/resources/designs
 output.dir=./ernie-engine/src/main/resources/output
+retention.period.default=7
+retention.period.maximum=14
diff --git a/ernie-server/src/main/scala/com/ksmpartners/ernie/server/PropertiesProviders.scala b/ernie-server/src/main/scala/com/ksmpartners/ernie/server/PropertiesProviders.scala
index a32f42f..37531ad 100644
--- a/ernie-server/src/main/scala/com/ksmpartners/ernie/server/PropertiesProviders.scala
+++ b/ernie-server/src/main/scala/com/ksmpartners/ernie/server/PropertiesProviders.scala
@@ -16,6 +16,8 @@ object PropertyNames {
   val AUTH_MODE_PROP = "authentication.mode"
   val RPT_DEFS_DIR_PROP = "rpt.def.dir"
   val OUTPUT_DIR_PROP = "output.dir"
+  val defaultRetentionPeriod = "retention.period.default"
+  val maximumRetentionPeriod = "retention.period.maximum"
 }
 
 /** Dependency injection trait to advertise dependence on a java.util.Properties instance */
diff --git a/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/JobDependencies.scala b/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/JobDependencies.scala
index 9ca8b36..60aaa99 100644
--- a/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/JobDependencies.scala
+++ b/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/JobDependencies.scala
@@ -48,7 +48,7 @@ trait JobDependencies extends RequiresCoordinator
     def post(body: Box[Array[Byte]]) = {
       try {
         val req = deserialize(body.open_!, classOf[model.ReportRequest])
-        val response = (coordinator !? engine.ReportRequest(req.getDefId, req.getRptType)).asInstanceOf[engine.ReportResponse]
+        val response = (coordinator !? engine.ReportRequest(req.getDefId, req.getRptType, if (req.getRetentionDays == 0) None else Some(req.getRetentionDays))).asInstanceOf[engine.ReportResponse]
 
         getJsonResponse(new model.ReportResponse(response.jobId), 201)
       } catch {
diff --git a/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/ServiceRegistry.scala b/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/ServiceRegistry.scala
index dccb76d..6338bf4 100644
--- a/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/ServiceRegistry.scala
+++ b/ernie-server/src/main/scala/com/ksmpartners/ernie/server/service/ServiceRegistry.scala
@@ -15,6 +15,7 @@ import java.util.Properties
 import java.io.{ FileInputStream, File }
 import org.slf4j.{ LoggerFactory, Logger }
 import com.ksmpartners.ernie.server.RequiresProperties
+import scala.Either
 
 /**
  * Object that registers the services used by the stateless dispatch
@@ -63,10 +64,20 @@ object ServiceRegistry extends JobDependencies
     val rptDefsDir = properties.get(RPT_DEFS_DIR_PROP).toString
     val outputDir = properties.get(OUTPUT_DIR_PROP).toString
 
-    new FileReportManager(rptDefsDir, outputDir)
+    val fileReportManager = new FileReportManager(rptDefsDir, outputDir)
+
+    val defaultRetentionDays: Int = try { properties.get(defaultRetentionPeriod).toString.toInt } catch { case e: Exception => ReportManager.getDefaultRetentionDays }
+    val maximumRetentionDays: Int = try { properties.get(maximumRetentionPeriod).toString.toInt } catch { case e: Exception => ReportManager.getMaximumRetentionDays }
+
+    fileReportManager.putDefaultRetentionDays(defaultRetentionDays)
+    fileReportManager.putMaximumRetentionDays(maximumRetentionDays)
+
+    fileReportManager
+
   }
 
   protected val coordinator: Coordinator = {
+
     val coord = new Coordinator(reportManager) with BirtReportGeneratorFactory
     coord.start()
     coord
diff --git a/ernie-server/src/test/scala/com/ksmpartners/ernie/server/DispatchRestAPITest.scala b/ernie-server/src/test/scala/com/ksmpartners/ernie/server/DispatchRestAPITest.scala
index 0162fea..b327655 100644
--- a/ernie-server/src/test/scala/com/ksmpartners/ernie/server/DispatchRestAPITest.scala
+++ b/ernie-server/src/test/scala/com/ksmpartners/ernie/server/DispatchRestAPITest.scala
@@ -102,7 +102,7 @@ class DispatchRestAPITest extends WebSpec(() => (new TestBoot).setUpAndBoot()) {
     }
   }
 
-  @TestSpecs(Array(new TestSpec(key = "ERNIE-41"), new TestSpec(key = "ERNIE-42")))
+  @TestSpecs(Array(new TestSpec(key = "ERNIE-41")))
   @Test
   def canGetDefs() {
     val mockReq = new MockReadAuthReq("/defs")
@@ -611,6 +611,65 @@ class DispatchRestAPITest extends WebSpec(() => (new TestBoot).setUpAndBoot()) {
     }
   }
 
+  @TestSpecs(Array(new TestSpec(key = "ERNIE-82")))
+  @Test
+  def cantGetDefDetailsWithoutJSONRequest() {
+    val mockReq = new MockReadAuthReq("/defs/test_def")
+    mockReq.headers += ("Accept" -> List("application/vnd.ksmpartners.ernie+xml"))
+
+    MockWeb.testReq(mockReq) { req =>
+      val resp = DispatchRestAPI.apply(req).apply()
+      Assert.assertTrue(resp.isDefined)
+      Assert.assertTrue(resp.open_!.isInstanceOf[NotAcceptableResponse])
+      Assert.assertEquals(resp.open_!.toResponse.code, 406)
+    }
+  }
+
+  @TestSpecs(Array(new TestSpec(key = "ERNIE-78")))
+  @Test
+  def cantGetDefDetailsWithoutReadAuth() {
+    val mockReq = new MockReadAuthReq("/defs/test_def")
+
+    mockReq.headers += ("Accept" -> List(ModelObject.TYPE_FULL))
+
+    MockWeb.testReq(mockReq) { req =>
+      val resp = DispatchRestAPI.apply(req).apply()
+      Assert.assertTrue(resp.isDefined)
+      Assert.assertTrue(resp.open_!.isInstanceOf[ForbiddenResponse])
+      Assert.assertEquals(resp.open_!.toResponse.code, 403)
+    }
+  }
+
+  @TestSpecs(Array(new TestSpec(key = "ERNIE-81")))
+  @Test
+  def defDetailServiceReturnsJSON() {
+    val mockReq = new MockReadAuthReq("/defs/test_def")
+    mockReq.headers += ("Accept" -> List(ModelObject.TYPE_FULL))
+    MockWeb.testReq(mockReq) { req =>
+      val resp = DispatchRestAPI(req)()
+      Assert.assertTrue(resp.isDefined)
+      Assert.assertTrue(resp.open_!.toResponse.headers.contains(("Content-Type", "application/vnd.ksmpartners.ernie+json")))
+    }
+  }
+
+  @TestSpecs(Array(new TestSpec(key = "ERNIE-80")))
+  @Test
+  def canGetDefDetail() {
+    val mockReq = new MockReadAuthReq("/defs/test_def")
+
+    mockReq.headers += ("Accept" -> List(ModelObject.TYPE_FULL))
+
+    MockWeb.testReq(mockReq) { req =>
+      val resp = DispatchRestAPI(req)()
+      Assert.assertTrue(resp.isDefined)
+      Assert.assertTrue(resp.open_!.isInstanceOf[PlainTextResponse])
+      Assert.assertEquals(resp.open_!.toResponse.code, 200)
+      val defDetailResponse: DefinitionEntity = DispatchRestAPI.deserialize(resp.open_!.asInstanceOf[PlainTextResponse].toResponse.data, classOf[DefinitionEntity])
+      // Assert.assertTrue(JobStatus.values().contains(statusResponse.getJobStatus))
+
+    }
+  }
+
   class MockReadAuthReq(path: String) extends MockHttpServletRequest(path) {
     override def isUserInRole(role: String) = role match {
       case READ_ROLE => true
